pipeline {
    agent any
    stages {
        stage('Pull Docker Image') {
            steps {
                script {
                    powershell '''
                    docker pull urmsandeep/ai-artistic-style-service:latest
                    '''
                }
            }
        }
        stage('Print Working Directory') {
            steps {
                script {
                    powershell '''
                    Write-Output "Current working directory: $pwd"
                    '''
                }
            }
        }
        stage('Run Tests') {
            steps {
                script {
                    powershell '''
                    # Start the container in detached mode
                    docker run -d --name ai-artistic-style-service urmsandeep/ai-artistic-style-service:latest
                    # Install pytest inside the running container
                    docker exec ai-artistic-style-service pip install pytest
                    # Run the tests
                    docker exec ai-artistic-style-service pytest tests/
                    # Stop and remove the container after testing
                    docker stop ai-artistic-style-service
                    docker rm ai-artistic-style-service
                    '''
                }
            }
        }
        stage('Deploy Service') {
            steps {
                script {
                    powershell '''
                    docker-compose down
                    docker-compose up -d
                    '''
                }
            }
        }
        stage('Verify Deployment') {
            steps {
                script {
                    powershell '''
                    Start-Sleep -Seconds 5
                    curl -X POST http://127.0.0.1:5001/styleTransfer -F "image=@test.jpg" --output styled_output.jpg
                    '''
                }
            }
        }
        
    }
    post {
        always {
            script {
                powershell '''
                docker system prune -f
                '''
            }
        }
        success {
            echo 'Pipeline executed successfully. The service is running and functional!'
        }
        failure {
            echo 'Pipeline failed. Check logs for errors.'
        }
    }
}
